#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'api_types'

    module ArThrift
      module MyService
        class Client
          include ::Thrift::Client

          def ping()
            send_ping()
            recv_ping()
          end

          def send_ping()
            send_message('ping', Ping_args)
          end

          def recv_ping()
            result = receive_message(Ping_result)
            return
          end

          def add_user(username)
            send_add_user(username)
            return recv_add_user()
          end

          def send_add_user(username)
            send_message('add_user', Add_user_args, :username => username)
          end

          def recv_add_user()
            result = receive_message(Add_user_result)
            return result.success unless result.success.nil?
            raise result.ouch unless result.ouch.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_user failed: unknown result')
          end

          def get_user(username)
            send_get_user(username)
            return recv_get_user()
          end

          def send_get_user(username)
            send_message('get_user', Get_user_args, :username => username)
          end

          def recv_get_user()
            result = receive_message(Get_user_result)
            return result.success unless result.success.nil?
            raise result.ouch unless result.ouch.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'get_user failed: unknown result')
          end

          def list_all_users()
            send_list_all_users()
            return recv_list_all_users()
          end

          def send_list_all_users()
            send_message('list_all_users', List_all_users_args)
          end

          def recv_list_all_users()
            result = receive_message(List_all_users_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_all_users failed: unknown result')
          end

          def delete_user(username)
            send_delete_user(username)
          end

          def send_delete_user(username)
            send_message('delete_user', Delete_user_args, :username => username)
          end
          def add_comment(username, comment)
            send_add_comment(username, comment)
            recv_add_comment()
          end

          def send_add_comment(username, comment)
            send_message('add_comment', Add_comment_args, :username => username, :comment => comment)
          end

          def recv_add_comment()
            result = receive_message(Add_comment_result)
            raise result.ouch unless result.ouch.nil?
            return
          end

          def add_project(name)
            send_add_project(name)
            return recv_add_project()
          end

          def send_add_project(name)
            send_message('add_project', Add_project_args, :name => name)
          end

          def recv_add_project()
            result = receive_message(Add_project_result)
            return result.success unless result.success.nil?
            raise result.ouch unless result.ouch.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'add_project failed: unknown result')
          end

          def list_all_projects()
            send_list_all_projects()
            return recv_list_all_projects()
          end

          def send_list_all_projects()
            send_message('list_all_projects', List_all_projects_args)
          end

          def recv_list_all_projects()
            result = receive_message(List_all_projects_result)
            return result.success unless result.success.nil?
            raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'list_all_projects failed: unknown result')
          end

        end

        class Processor
          include ::Thrift::Processor

          def process_ping(seqid, iprot, oprot)
            args = read_args(iprot, Ping_args)
            result = Ping_result.new()
            @handler.ping()
            write_result(result, oprot, 'ping', seqid)
          end

          def process_add_user(seqid, iprot, oprot)
            args = read_args(iprot, Add_user_args)
            result = Add_user_result.new()
            begin
              result.success = @handler.add_user(args.username)
            rescue ArThrift::InvalidOperation => ouch
              result.ouch = ouch
            end
            write_result(result, oprot, 'add_user', seqid)
          end

          def process_get_user(seqid, iprot, oprot)
            args = read_args(iprot, Get_user_args)
            result = Get_user_result.new()
            begin
              result.success = @handler.get_user(args.username)
            rescue ArThrift::InvalidOperation => ouch
              result.ouch = ouch
            end
            write_result(result, oprot, 'get_user', seqid)
          end

          def process_list_all_users(seqid, iprot, oprot)
            args = read_args(iprot, List_all_users_args)
            result = List_all_users_result.new()
            result.success = @handler.list_all_users()
            write_result(result, oprot, 'list_all_users', seqid)
          end

          def process_delete_user(seqid, iprot, oprot)
            args = read_args(iprot, Delete_user_args)
            @handler.delete_user(args.username)
            return
          end

          def process_add_comment(seqid, iprot, oprot)
            args = read_args(iprot, Add_comment_args)
            result = Add_comment_result.new()
            begin
              @handler.add_comment(args.username, args.comment)
            rescue ArThrift::InvalidOperation => ouch
              result.ouch = ouch
            end
            write_result(result, oprot, 'add_comment', seqid)
          end

          def process_add_project(seqid, iprot, oprot)
            args = read_args(iprot, Add_project_args)
            result = Add_project_result.new()
            begin
              result.success = @handler.add_project(args.name)
            rescue ArThrift::InvalidOperation => ouch
              result.ouch = ouch
            end
            write_result(result, oprot, 'add_project', seqid)
          end

          def process_list_all_projects(seqid, iprot, oprot)
            args = read_args(iprot, List_all_projects_args)
            result = List_all_projects_result.new()
            result.success = @handler.list_all_projects()
            write_result(result, oprot, 'list_all_projects', seqid)
          end

        end

        # HELPER FUNCTIONS AND STRUCTURES

        class Ping_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Ping_result
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_user_args
          include ::Thrift::Struct
          USERNAME = 1

          ::Thrift::Struct.field_accessor self, :username
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_user_result
          include ::Thrift::Struct
          SUCCESS = 0
          OUCH = 1

          ::Thrift::Struct.field_accessor self, :success, :ouch
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ArThrift::User},
            OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ArThrift::InvalidOperation}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_user_args
          include ::Thrift::Struct
          USERNAME = 1

          ::Thrift::Struct.field_accessor self, :username
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Get_user_result
          include ::Thrift::Struct
          SUCCESS = 0
          OUCH = 1

          ::Thrift::Struct.field_accessor self, :success, :ouch
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ArThrift::User},
            OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ArThrift::InvalidOperation}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class List_all_users_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class List_all_users_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ArThrift::User}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Delete_user_args
          include ::Thrift::Struct
          USERNAME = 1

          ::Thrift::Struct.field_accessor self, :username
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Delete_user_result
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_comment_args
          include ::Thrift::Struct
          USERNAME = 1
          COMMENT = 2

          ::Thrift::Struct.field_accessor self, :username, :comment
          FIELDS = {
            USERNAME => {:type => ::Thrift::Types::STRING, :name => 'username'},
            COMMENT => {:type => ::Thrift::Types::STRING, :name => 'comment'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_comment_result
          include ::Thrift::Struct
          OUCH = 1

          ::Thrift::Struct.field_accessor self, :ouch
          FIELDS = {
            OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ArThrift::InvalidOperation}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_project_args
          include ::Thrift::Struct
          NAME = 1

          ::Thrift::Struct.field_accessor self, :name
          FIELDS = {
            NAME => {:type => ::Thrift::Types::STRING, :name => 'name'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class Add_project_result
          include ::Thrift::Struct
          SUCCESS = 0
          OUCH = 1

          ::Thrift::Struct.field_accessor self, :success, :ouch
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ArThrift::Project},
            OUCH => {:type => ::Thrift::Types::STRUCT, :name => 'ouch', :class => ArThrift::InvalidOperation}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class List_all_projects_args
          include ::Thrift::Struct

          FIELDS = {

          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        class List_all_projects_result
          include ::Thrift::Struct
          SUCCESS = 0

          ::Thrift::Struct.field_accessor self, :success
          FIELDS = {
            SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => ArThrift::Project}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

      end

    end
