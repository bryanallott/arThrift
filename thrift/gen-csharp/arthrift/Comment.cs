/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace arthrift
{

  [Serializable]
  public partial class Comment : TBase
  {
    private User author;
    private string body;
    private bool published;

    public User Author
    {
      get
      {
        return author;
      }
      set
      {
        __isset.author = true;
        this.author = value;
      }
    }

    public string Body
    {
      get
      {
        return body;
      }
      set
      {
        __isset.body = true;
        this.body = value;
      }
    }

    public bool Published
    {
      get
      {
        return published;
      }
      set
      {
        __isset.published = true;
        this.published = value;
      }
    }


    public Isset __isset;
    [Serializable]
    public struct Isset {
      public bool author;
      public bool body;
      public bool published;
    }

    public Comment() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              this.author = new User();
              this.author.Read(iprot);
              this.__isset.author = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              this.body = iprot.ReadString();
              this.__isset.body = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Bool) {
              this.published = iprot.ReadBool();
              this.__isset.published = true;
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Comment");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (this.author != null && __isset.author) {
        field.Name = "author";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        this.author.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (this.body != null && __isset.body) {
        field.Name = "body";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(this.body);
        oprot.WriteFieldEnd();
      }
      if (__isset.published) {
        field.Name = "published";
        field.Type = TType.Bool;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(this.published);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Comment(");
      sb.Append("author: ");
      sb.Append(this.author== null ? "<null>" : this.author.ToString());
      sb.Append(",body: ");
      sb.Append(this.body);
      sb.Append(",published: ");
      sb.Append(this.published);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
