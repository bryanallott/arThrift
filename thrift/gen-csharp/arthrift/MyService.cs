/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using Thrift.Protocol;
using Thrift.Transport;
namespace arthrift
{
  public class MyService {
    public interface Iface {
      void ping();
      User add_user(string username);
      User get_user(string username);
      List<User> list_all_users();
      void delete_user(string username);
      void add_comment(string username, string comment);
      Project add_project(string name);
      List<Project> list_all_projects();
    }

    public class Client : Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      public void ping()
      {
        send_ping();
        recv_ping();
      }

      public void send_ping()
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      public User add_user(string username)
      {
        send_add_user(username);
        return recv_add_user();
      }

      public void send_add_user(string username)
      {
        oprot_.WriteMessageBegin(new TMessage("add_user", TMessageType.Call, seqid_));
        add_user_args args = new add_user_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public User recv_add_user()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        add_user_result result = new add_user_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ouch) {
          throw result.Ouch;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_user failed: unknown result");
      }

      public User get_user(string username)
      {
        send_get_user(username);
        return recv_get_user();
      }

      public void send_get_user(string username)
      {
        oprot_.WriteMessageBegin(new TMessage("get_user", TMessageType.Call, seqid_));
        get_user_args args = new get_user_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public User recv_get_user()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        get_user_result result = new get_user_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ouch) {
          throw result.Ouch;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "get_user failed: unknown result");
      }

      public List<User> list_all_users()
      {
        send_list_all_users();
        return recv_list_all_users();
      }

      public void send_list_all_users()
      {
        oprot_.WriteMessageBegin(new TMessage("list_all_users", TMessageType.Call, seqid_));
        list_all_users_args args = new list_all_users_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<User> recv_list_all_users()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        list_all_users_result result = new list_all_users_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_all_users failed: unknown result");
      }

      public void delete_user(string username)
      {
        send_delete_user(username);
      }

      public void send_delete_user(string username)
      {
        oprot_.WriteMessageBegin(new TMessage("delete_user", TMessageType.Call, seqid_));
        delete_user_args args = new delete_user_args();
        args.Username = username;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void add_comment(string username, string comment)
      {
        send_add_comment(username, comment);
        recv_add_comment();
      }

      public void send_add_comment(string username, string comment)
      {
        oprot_.WriteMessageBegin(new TMessage("add_comment", TMessageType.Call, seqid_));
        add_comment_args args = new add_comment_args();
        args.Username = username;
        args.Comment = comment;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public void recv_add_comment()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        add_comment_result result = new add_comment_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.ouch) {
          throw result.Ouch;
        }
        return;
      }

      public Project add_project(string name)
      {
        send_add_project(name);
        return recv_add_project();
      }

      public void send_add_project(string name)
      {
        oprot_.WriteMessageBegin(new TMessage("add_project", TMessageType.Call, seqid_));
        add_project_args args = new add_project_args();
        args.Name = name;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public Project recv_add_project()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        add_project_result result = new add_project_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.ouch) {
          throw result.Ouch;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "add_project failed: unknown result");
      }

      public List<Project> list_all_projects()
      {
        send_list_all_projects();
        return recv_list_all_projects();
      }

      public void send_list_all_projects()
      {
        oprot_.WriteMessageBegin(new TMessage("list_all_projects", TMessageType.Call, seqid_));
        list_all_projects_args args = new list_all_projects_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        oprot_.Transport.Flush();
      }

      public List<Project> recv_list_all_projects()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        list_all_projects_result result = new list_all_projects_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "list_all_projects failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["ping"] = ping_Process;
        processMap_["add_user"] = add_user_Process;
        processMap_["get_user"] = get_user_Process;
        processMap_["list_all_users"] = list_all_users_Process;
        processMap_["delete_user"] = delete_user_Process;
        processMap_["add_comment"] = add_comment_Process;
        processMap_["add_project"] = add_project_Process;
        processMap_["list_all_projects"] = list_all_projects_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        iface_.ping();
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void add_user_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        add_user_args args = new add_user_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        add_user_result result = new add_user_result();
        try {
          result.Success = iface_.add_user(args.Username);
        } catch (InvalidOperation ouch) {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("add_user", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void get_user_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        get_user_args args = new get_user_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        get_user_result result = new get_user_result();
        try {
          result.Success = iface_.get_user(args.Username);
        } catch (InvalidOperation ouch) {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("get_user", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void list_all_users_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        list_all_users_args args = new list_all_users_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        list_all_users_result result = new list_all_users_result();
        result.Success = iface_.list_all_users();
        oprot.WriteMessageBegin(new TMessage("list_all_users", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void delete_user_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        delete_user_args args = new delete_user_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        iface_.delete_user(args.Username);
        return;
      }
      public void add_comment_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        add_comment_args args = new add_comment_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        add_comment_result result = new add_comment_result();
        try {
          iface_.add_comment(args.Username, args.Comment);
        } catch (InvalidOperation ouch) {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("add_comment", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void add_project_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        add_project_args args = new add_project_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        add_project_result result = new add_project_result();
        try {
          result.Success = iface_.add_project(args.Name);
        } catch (InvalidOperation ouch) {
          result.Ouch = ouch;
        }
        oprot.WriteMessageBegin(new TMessage("add_project", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void list_all_projects_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        list_all_projects_args args = new list_all_projects_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        list_all_projects_result result = new list_all_projects_result();
        result.Success = iface_.list_all_projects();
        oprot.WriteMessageBegin(new TMessage("list_all_projects", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    [Serializable]
    public partial class ping_args : TBase
    {

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class ping_result : TBase
    {

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_user_args : TBase
    {
      private string username;

      public string Username
      {
        get
        {
          return username;
        }
        set
        {
          __isset.username = true;
          this.username = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool username;
      }

      public add_user_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.username = iprot.ReadString();
                this.__isset.username = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_user_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_user_args(");
        sb.Append("username: ");
        sb.Append(this.username);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_user_result : TBase
    {
      private User success;
      private InvalidOperation ouch;

      public User Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidOperation Ouch
      {
        get
        {
          return ouch;
        }
        set
        {
          __isset.ouch = true;
          this.ouch = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ouch;
      }

      public add_user_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new User();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ouch = new InvalidOperation();
                this.ouch.Read(iprot);
                this.__isset.ouch = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_user_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (this.ouch != null) {
            field.Name = "ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_user_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ouch: ");
        sb.Append(this.ouch== null ? "<null>" : this.ouch.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_user_args : TBase
    {
      private string username;

      public string Username
      {
        get
        {
          return username;
        }
        set
        {
          __isset.username = true;
          this.username = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool username;
      }

      public get_user_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.username = iprot.ReadString();
                this.__isset.username = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_user_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_user_args(");
        sb.Append("username: ");
        sb.Append(this.username);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class get_user_result : TBase
    {
      private User success;
      private InvalidOperation ouch;

      public User Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidOperation Ouch
      {
        get
        {
          return ouch;
        }
        set
        {
          __isset.ouch = true;
          this.ouch = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ouch;
      }

      public get_user_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new User();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ouch = new InvalidOperation();
                this.ouch.Read(iprot);
                this.__isset.ouch = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("get_user_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (this.ouch != null) {
            field.Name = "ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("get_user_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ouch: ");
        sb.Append(this.ouch== null ? "<null>" : this.ouch.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class list_all_users_args : TBase
    {

      public list_all_users_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_all_users_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("list_all_users_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class list_all_users_result : TBase
    {
      private List<User> success;

      public List<User> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public list_all_users_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<User>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    User _elem2 = new User();
                    _elem2 = new User();
                    _elem2.Read(iprot);
                    this.success.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_all_users_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (User _iter3 in this.success)
              {
                _iter3.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("list_all_users_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class delete_user_args : TBase
    {
      private string username;

      public string Username
      {
        get
        {
          return username;
        }
        set
        {
          __isset.username = true;
          this.username = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool username;
      }

      public delete_user_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.username = iprot.ReadString();
                this.__isset.username = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delete_user_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.username);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delete_user_args(");
        sb.Append("username: ");
        sb.Append(this.username);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_comment_args : TBase
    {
      private string username;
      private string comment;

      public string Username
      {
        get
        {
          return username;
        }
        set
        {
          __isset.username = true;
          this.username = value;
        }
      }

      public string Comment
      {
        get
        {
          return comment;
        }
        set
        {
          __isset.comment = true;
          this.comment = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool username;
        public bool comment;
      }

      public add_comment_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.username = iprot.ReadString();
                this.__isset.username = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                this.comment = iprot.ReadString();
                this.__isset.comment = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_comment_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.username != null && __isset.username) {
          field.Name = "username";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.username);
          oprot.WriteFieldEnd();
        }
        if (this.comment != null && __isset.comment) {
          field.Name = "comment";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.comment);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_comment_args(");
        sb.Append("username: ");
        sb.Append(this.username);
        sb.Append(",comment: ");
        sb.Append(this.comment);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_comment_result : TBase
    {
      private InvalidOperation ouch;

      public InvalidOperation Ouch
      {
        get
        {
          return ouch;
        }
        set
        {
          __isset.ouch = true;
          this.ouch = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool ouch;
      }

      public add_comment_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                this.ouch = new InvalidOperation();
                this.ouch.Read(iprot);
                this.__isset.ouch = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_comment_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.ouch) {
          if (this.ouch != null) {
            field.Name = "ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_comment_result(");
        sb.Append("ouch: ");
        sb.Append(this.ouch== null ? "<null>" : this.ouch.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_project_args : TBase
    {
      private string name;

      public string Name
      {
        get
        {
          return name;
        }
        set
        {
          __isset.name = true;
          this.name = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool name;
      }

      public add_project_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                this.name = iprot.ReadString();
                this.__isset.name = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_project_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (this.name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(this.name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_project_args(");
        sb.Append("name: ");
        sb.Append(this.name);
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class add_project_result : TBase
    {
      private Project success;
      private InvalidOperation ouch;

      public Project Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }

      public InvalidOperation Ouch
      {
        get
        {
          return ouch;
        }
        set
        {
          __isset.ouch = true;
          this.ouch = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
        public bool ouch;
      }

      public add_project_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                this.success = new Project();
                this.success.Read(iprot);
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                this.ouch = new InvalidOperation();
                this.ouch.Read(iprot);
                this.__isset.ouch = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("add_project_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            this.success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.ouch) {
          if (this.ouch != null) {
            field.Name = "ouch";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            this.ouch.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("add_project_result(");
        sb.Append("success: ");
        sb.Append(this.success== null ? "<null>" : this.success.ToString());
        sb.Append(",ouch: ");
        sb.Append(this.ouch== null ? "<null>" : this.ouch.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class list_all_projects_args : TBase
    {

      public list_all_projects_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_all_projects_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("list_all_projects_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    [Serializable]
    public partial class list_all_projects_result : TBase
    {
      private List<Project> success;

      public List<Project> Success
      {
        get
        {
          return success;
        }
        set
        {
          __isset.success = true;
          this.success = value;
        }
      }


      public Isset __isset;
      [Serializable]
      public struct Isset {
        public bool success;
      }

      public list_all_projects_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  this.success = new List<Project>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Project _elem6 = new Project();
                    _elem6 = new Project();
                    _elem6.Read(iprot);
                    this.success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
                this.__isset.success = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("list_all_projects_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (this.success != null) {
            field.Name = "success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, this.success.Count));
              foreach (Project _iter7 in this.success)
              {
                _iter7.Write(oprot);
                oprot.WriteListEnd();
              }
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("list_all_projects_result(");
        sb.Append("success: ");
        sb.Append(this.success);
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
